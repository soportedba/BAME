-----------------------------------------------------------------------------
-- METADATA-ETL DDL TABLE CREATION
-----------------------------------------------------------------------------
-- Database to use: est_dwh
-- We´ll not use schemas, we´ll work within public schema
-- Work with incremental data loads, based on extracted data from operational database
-- Will use the IDD (ID Derived) for all indicators
-- Will have a control load table
-- Will exists STA tables (STaging Area tables) to load partial data from date ranges
-- PDI ETL will inform the process timestamps
-- At first load, it will take 01-01-1900 as the oldest one
 
--------------------------------------------------------
--  DDL MTDT_LOAD_CONTROL
--------------------------------------------------------
CREATE TABLE MTDT_LOAD_CONTROL
(
   ID BIGSERIAL primary key, 
   ID_CUBE numeric,
   FEC_INI timestamp(3) not null,
   FEC_FIN timestamp(3) not null,
   COMPLETED varchar(1) not null CHECK (COMPLETED IN ('N','Y','P')),
   PARENT_ID BIGINT,
   NUM_ROWS BIGINT
);
ALTER TABLE MTDT_LOAD_CONTROL ADD CONSTRAINT FK_MTDT_LOAD_CONTROL FOREIGN KEY (PARENT_ID) REFERENCES MTDT_LOAD_CONTROL (ID) ;

COMMENT ON TABLE MTDT_LOAD_CONTROL is 'DWL LOAD CONTROL';
COMMENT ON COLUMN MTDT_LOAD_CONTROL.FEC_INI is 'LOAD INITIAL TIMESTAMP';
COMMENT ON COLUMN MTDT_LOAD_CONTROL.FEC_FIN is 'LOAD END TIMESTAMP';
COMMENT ON COLUMN MTDT_LOAD_CONTROL.COMPLETED is 'SUCCESS LOAD, WHERE P=PARTIAL';
COMMENT ON COLUMN MTDT_LOAD_CONTROL.PARENT_ID is 'PARENT ID LOAD WHEN COMPLETED=P';
COMMENT ON COLUMN MTDT_LOAD_CONTROL.NUM_ROWS is 'NUMBER OF ROWS TO BE PROCESSED';

--------------------------------------------------------
--  DDL MTDT_STA_DATASOURCES
--------------------------------------------------------
/*
	
	Table MTDT_STA_DATASOURCES. Table to register the datasources that take into account into the ETLs
*/ 
CREATE TABLE MTDT_STA_DATASOURCES 
   (	IDCONNECTION  numeric primary key, 
	DESCCONECTION varchar(100 ), 
	PROVIDER varchar(100 ), 
	IPPORT varchar(1000 ), 
	DATABASE varchar(100 ), 
	USERNAME varchar(100 ), 
	PASSWORD varchar(100 ),
	AUTHDB varchar(100),
	SHARD varchar(100)
   ) ;

COMMENT ON COLUMN MTDT_STA_DATASOURCES.IDCONNECTION IS 'Connection identification';
COMMENT ON COLUMN MTDT_STA_DATASOURCES.DESCCONECTION IS 'Connection description';
COMMENT ON COLUMN MTDT_STA_DATASOURCES.PROVIDER IS 'Connection database provider';
COMMENT ON COLUMN MTDT_STA_DATASOURCES.AUTHDB IS 'Authentication database';
COMMENT ON TABLE MTDT_STA_DATASOURCES  IS 'Table to register the datasources that take into account into the ETLs';

--------------------------------------------------------
--  DDL MTDT_STA_SOURCE_TABLE
--------------------------------------------------------
/*
	Table MTDT_STA_SOURCE_TABLE. Table to register the query of data extraction.
*/
CREATE TABLE MTDT_STA_SOURCE_TABLE 
(	IDSTA_TABLE  numeric primary key, 
STA_TABLE varchar(50 ), 
STA_TABLE_DDL varchar(2000),
DMLQUERY TEXT, 
FC_CREATION DATE, 
IDCONNECTION numeric NOT NULL, 
ITSTATS varchar(1 ), 
EXTRACTION_OBSERVATIONS varchar(2000 ), 
IFLOAD varchar(1 ),
ID_CUBES varchar(100),
source_timestamp_column character varying(50),
source_id_column character varying(50)
) ;

COMMENT ON COLUMN MTDT_STA_SOURCE_TABLE.ITSTATS IS 'Y/N To include the event into the log';
COMMENT ON COLUMN MTDT_STA_SOURCE_TABLE.EXTRACTION_OBSERVATIONS IS 'Extraction notes';
COMMENT ON COLUMN MTDT_STA_SOURCE_TABLE.IFLOAD IS 'Y/N to force the creation or not';
COMMENT ON COLUMN MTDT_STA_SOURCE_TABLE.ID_CUBES IS 'RELATED LIST OF ID CUBES THE STAGIN BELONGS TO';

ALTER TABLE MTDT_STA_SOURCE_TABLE ADD CONSTRAINT FK_SOURCE_TABLE_DATASOURCES FOREIGN KEY (IDCONNECTION) REFERENCES MTDT_STA_DATASOURCES (IDCONNECTION) ;

--------------------------------------------------------
--  DDL GENERIC METADATA
--------------------------------------------------------

CREATE TABLE MTDT_CUBE
(
   ID_CUBE numeric primary key, 
   NAME CHARACTER VARYING(50), 
   DESCRIPTION CHARACTER VARYING(4000), 
   SCHEDULER VARCHAR(15) CHECK (SCHEDULER IN ('DAILY', 'WEEKLY', 'MONTHLY', 'TRIMESTRAL', 'SEMESTRAL', 'ANUAL')),
   TYPE VARCHAR(15) CHECK (TYPE IN ('COMPLETE','INCREMENTAL')),
   TMP_NAME VARCHAR(100),
   PARENT_ID_CUBES varchar(100)
) ;
COMMENT ON TABLE MTDT_CUBE is 'CUBES DEFINITION TABLE';
COMMENT ON COLUMN MTDT_CUBE.ID_CUBE IS 'ID_CUBE';
COMMENT ON COLUMN MTDT_CUBE.NAME IS 'NAME OF THE CUBE THAT MATCH THE PHISICAL TABLE';
COMMENT ON COLUMN MTDT_CUBE.DESCRIPTION IS 'DESCRIPTION OF THE CUBE INFORMATION';
COMMENT ON COLUMN MTDT_CUBE.SCHEDULER IS 'SCHEDULING OF THE CUBE, 1-DAILY, 2-WEEKLY, 3-MONTHLY, 4-TRIMESTRAL, 5-SEMESTRAL, 6-ANUAL';
COMMENT ON COLUMN MTDT_CUBE.TYPE IS 'TYPE OF THE CUBE LOAD, COMPLETE-COMPLETE LOAD OF THE CUBE/DIMENSIONS, INCREMENTAL-INCREMENTAL LOAD OF THE CUBE';
COMMENT ON COLUMN MTDT_CUBE.TMP_NAME IS 'NAME OF TEMPORARY TABLE WITH PRECALCULATED DATA';
COMMENT ON COLUMN MTDT_CUBE.PARENT_ID_CUBES IS 'DEPENDANT LIST OF ID CUBES TO RECALCULATE DATA: 10,15,...';

CREATE TABLE MTDT_CUBE_XML 
(ID_CUBE numeric,
ORD numeric,
XML CHARACTER VARYING(4000),
CONSTRAINT FK_CUBE_XML_CUBE FOREIGN KEY (ID_CUBE) REFERENCES MTDT_CUBE(ID_CUBE) ON DELETE CASCADE
) ;

COMMENT ON TABLE MTDT_CUBE_xml is 'AUXILIARY TABLE FOR XML CUBES GENERATION';


/* 	Date Tables
	They are created / managed in the CUBE PRE
	Name: CM_DIM_ <DESCRIPTION>, where description is what is in the definition table of dimension MTDT_dimension
	NAME: It points to the column id, eg - id_date, id_time_minute, id_second ...
	DESCRIPTION: Part of the name of the dimension table CM_DIM_ <DESCRIPTION>
	TYPE: D
	STA_TABLE = null, no need
*/
CREATE TABLE MTDT_DIMENSION
(ID_DIMENSION numeric PRIMARY KEY,
ID_CUBE numeric NOT NULL,
NAME CHARACTER VARYING(50) NOT NULL,
DESCRIPTION CHARACTER VARYING(4000) NOT NULL,
DESCRIPTION_LONG CHARACTER VARYING(4000),
SQL CHARACTER VARYING(4000),
SCHEDULER VARCHAR(15) NOT NULL CONSTRAINT DIM_PERIOD_CK CHECK (SCHEDULER IN ('DAILY', 'WEEKLY', 'MONTHLY', 'TRIMESTRAL', 'SEMESTRAL', 'ANUAL')),
TYPE CHARACTER VARYING(5) NOT NULL CONSTRAINT DIM_TYPE_CK CHECK (TYPE IN ('D','N','I','IDD','SNOW', 'DEGEN', 'REFER')),
STA_TABLE VARCHAR(100),
ID_DIMENSION_REFER NUMERIC,
CONSTRAINT FK_DIMENSION_CUBE FOREIGN KEY (ID_CUBE) REFERENCES MTDT_CUBE(ID_CUBE)  ON DELETE CASCADE
) 
;

COMMENT ON TABLE MTDT_DIMENSION IS 'DIMENSIONS TABLE';
COMMENT ON COLUMN MTDT_DIMENSION.NAME IS 'NAME OF DIMENSION THAT MATCH THE PHYSICAL TABLE CREATED, WHEN ID_DIMENSION_REFER IS SPECIFIED THIS FIELD MEANS THE REFERED COLUMN_NAME';
COMMENT ON COLUMN MTDT_DIMENSION.DESCRIPTION IS 'DESCRIPTION OF THE DIMENSION THAT MATCH WITH THE DIMENSION FIELD TO SHOW, WHEN ID_DIMENSION_REFER IS SPECIFIED THIS FIELD MEANS THE REFERED TABLE_NAME';
COMMENT ON COLUMN MTDT_DIMENSION.SCHEDULER IS 'SCHEDULER OF DIMENSION REFRESH, 1-DAILY, 2-WEEKLY, 3-MONTHLY, 4-TRIMESTRAL, 5-SEMESTRAL, 6-ANUAL';
COMMENT ON COLUMN MTDT_DIMENSION.TYPE IS 'DIMENSION TYPE, D-DATE, N-NORMAL, I-INDICATOR, IDD-IDS_DERIVATED(INCREMENTAL), DEG-DEGENERATED DIMENSION TO DISTINGUISH PROCESSES OVER DATES, INDICATORS, SNOW-SPECIAL DIMENTIONS, SNOW-FLAKE SPECIAL TREATMENT IN LOADS AND DEGENERATED DIMENSIONS, REFER-DIMENSION REFERS TO OTHER REFERENCED IN ID_DIMENSION_REFER';
COMMENT ON COLUMN MTDT_DIMENSION.STA_TABLE IS 'TABLE NAME OF STA TABLE WHERE INCREMENTAL AUD PARTIAL LOAD IS SEARCHED';
COMMENT ON COLUMN MTDT_DIMENSION.ID_DIMENSION_REFER IS 'REFERENCED ID_DIMENSION, NO LOAD REQUIRED IT DEPENDS ON REFERED DEFINITION AND LOAD, NAME AND DESCRIPTION REPRESENT THE REFERED COLUMN_NAME AND TABLE_NAME';


CREATE TABLE MTDT_INDICATOR
(ID_INDICATOR numeric PRIMARY KEY,
ID_CUBE numeric,
NAME CHARACTER VARYING(100),
DESCRIPTION CHARACTER VARYING(4000),
DESCRIPTION_LONG CHARACTER VARYING(4000),
SQL CHARACTER VARYING(4000),
SQL_GROUP CHARACTER VARYING(100) DEFAULT 'SUM' CONSTRAINT IND_SQL_GROUP_CK CHECK (SQL_GROUP IN ('SUM','MIN','MAX','AVG','DISTINCT-COUNT','COUNT')),
CONSTRAINT FK_INDICATOR_CUBE FOREIGN KEY (ID_CUBE) REFERENCES MTDT_CUBE(ID_CUBE)  ON DELETE CASCADE
) 
;

COMMENT ON TABLE MTDT_INDICATOR IS 'INDICATORS TABLE';
COMMENT ON COLUMN MTDT_INDICATOR.SQL_GROUP IS 'TYPE OF GROUPING FOR THE DIMENSION COLUMN, SUM, MIN, MAX, AVG';


CREATE TABLE MTDT_CUBE_PRE_POST
(ID_PRE_POST numeric PRIMARY KEY,
ID_CUBE numeric,
TYPE CHARACTER VARYING(4),
SQL CHARACTER VARYING(4000),
CONSTRAINT CUB_TIP_CK CHECK (TYPE IN ('PRE','POST')),
CONSTRAINT FK_CUBE_PRE_POST_CUBE FOREIGN KEY (ID_CUBE) REFERENCES MTDT_CUBE(ID_CUBE)  ON DELETE CASCADE
) 
;
alter table MTDT_CUBE_pre_post alter column sql type text;

COMMENT ON TABLE MTDT_CUBE_PRE_POST IS 'PRE AND POST PROCESSES IN THE CUBE CALCS';
COMMENT ON COLUMN MTDT_CUBE_PRE_POST.TYPE IS 'COMMAND TYPE, [PRE,POST]';
COMMENT ON COLUMN MTDT_CUBE_PRE_POST.ID_PRE_POST IS 'PRE AND POST ID COMMAND, IT WILL SET THE EXECUTION ORDER OF THE SENTENCES';

CREATE TABLE MTDT_DIMENSION_PRE_POST
(ID_PRE_POST numeric PRIMARY KEY,
ID_DIMENSION numeric,
TYPE CHARACTER VARYING(4),
SQL CHARACTER VARYING(4000),
CONSTRAINT DIM_TIP_CK CHECK (TYPE IN ('PRE','POST')),
CONSTRAINT FK_DIM_PRE_POST_DIM FOREIGN KEY (ID_DIMENSION) REFERENCES MTDT_DIMENSION(ID_DIMENSION)  ON DELETE CASCADE
) 
;

COMMENT ON TABLE MTDT_DIMENSION_PRE_POST IS 'RE AND POST PROCESSES IN THE DIMENSIONS CALCS';
COMMENT ON COLUMN MTDT_DIMENSION_PRE_POST.TYPE IS 'COMMAND TYPE, [PRE,POST]';

CREATE TABLE MTDT_LOG
(ID_LOG bigserial PRIMARY KEY,
SQL CHARACTER VARYING(4000),
FEC_INI TIMESTAMP(0) without time zone,
FEC_FIN TIMESTAMP(0) without time zone, 
PROCESS CHARACTER VARYING(100),
PARAMETERS CHARACTER VARYING(100)
) 
;
alter table MTDT_log alter column sql type text;

COMMENT ON TABLE MTDT_LOG IS 'LOADS LOG TABLE';
COMMENT ON COLUMN MTDT_LOG.PROCESS IS 'ASSOCIATED LOAD PROCESS, CARGA_PRE_POST, CARGA, ETC';
COMMENT ON COLUMN MTDT_LOG.PARAMETERS IS 'PARAMETERS LIST OF THE REFERENCED CALL LOAD';
COMMENT ON COLUMN MTDT_LOG.SQL IS 'SQL EXECUTED FOR THE LOAD';

/*
	IDD-DIMENSIONS
	Based on bypass field value:
	Y) IDDs are already calculated in TAB_DIM2_COL_IDD, we only put this value in TAB_DIM1_COL_IDD based on TAB_DIM1_COL_JOIN and TAB_DIM2_COL_JOIN, no TAB_DIM2_COL_FEC required.
	N) IDDs needs to be calculated in TAB_DIM1.TAB_DIM1_COL_IDD based on join between TAB_DIM1_COL_JOIN and TAB_DIM2_COL_JON and dates intervals (always AUD_FEC and AUD_FEC_FIN)
	
	TAB_DIM1 and TAB_DIM2 could be the same table, representing in this case a PARENT-CHILD RELATION

*/
CREATE TABLE MTDT_DIMENSION_IDD (ID_DIMENSION_IDD INTEGER PRIMARY KEY, 
ID_DIMENSION NUMERIC NOT NULL,
TAB_DIM1 VARCHAR(100), 
TAB_DIM1_COL_IDD VARCHAR(100), 
TAB_DIM1_COL_JOIN VARCHAR(100), 
TAB_DIM2 VARCHAR(100), 
TAB_DIM2_COL_IDD VARCHAR(100), 
TAB_DIM2_COL_JOIN VARCHAR(100), 
BYPASS VARCHAR(20) CHECK (BYPASS IN ('Y','N'))
);
COMMENT ON TABLE MTDT_DIMENSION_idd IS 'DIMENSIONS IDD TABLE, FOR THE RELATED IDDS MANAGEMENT';
COMMENT ON COLUMN MTDT_DIMENSION_IDD.BYPASS IS 'BYPASS IDD CALCULATION, Y-YES (IDDS ARE ALREADY CALCULATED IN TAB_DIM2_COL_IDD COLUMN), N-NO (IDDS NEEDS TO BE CALCULATED IN TAB_DIM1 WITHIN TAB_DIM1_COL_IDD BASED ON TAB_DIM1_COL_JOIN AND TAB_DIM2_COL_JOIN AND DATE TAB_DIM2_COL_FEC)';
COMMENT ON COLUMN MTDT_DIMENSION_IDD.ID_DIMENSION IS 'RELATED DIMENSION';
COMMENT ON COLUMN MTDT_DIMENSION_IDD.TAB_DIM1 IS 'PRINCIPAL DIMENSION TABLE';
COMMENT ON COLUMN MTDT_DIMENSION_IDD.TAB_DIM2 IS 'SECONDARY DIMENSION TABLE';
COMMENT ON COLUMN MTDT_DIMENSION_IDD.TAB_DIM1_COL_IDD IS 'PRINCIPAL DIMENSION IDD COLUMN';
COMMENT ON COLUMN MTDT_DIMENSION_IDD.TAB_DIM2_COL_IDD IS 'SECONDARY DIMENSION IDD COLUMN';
COMMENT ON COLUMN MTDT_DIMENSION_IDD.TAB_DIM1_COL_JOIN IS 'PRINCIPAL DIMENSION JOIN COLUMN';
COMMENT ON COLUMN MTDT_DIMENSION_IDD.TAB_DIM2_COL_JOIN IS 'SECONDARY DIMENSION JOIN COLUMN';

/*
	DASHBOARDS TABLES
*/
CREATE TABLE MTDT_DASHBOARDS
(ID BIGSERIAL primary key, FMONTH VARCHAR(7),ID_INDICATOR VARCHAR(100), VALUE NUMERIC);

CREATE TABLE MTDT_DASHBOARDS_ADJUST AS SELECT * FROM MTDT_DASHBOARDS WHERE 0=1;

CREATE TABLE MTDT_DASHBOARDS_DEF
(ID BIGSERIAL primary key, FGROUP VARCHAR(100), ID_INDICATOR VARCHAR(100), INDICATOR VARCHAR(200), SQL VARCHAR(4000), FORDER NUMERIC, inf_LIMIT NUMERIC, UPPER_LIMIT NUMERIC,FMONTH VARCHAR(7),FMONTH_FIN VARCHAR(7),
TYPE VARCHAR(100) DEFAULT 'DEFAULT' ,
DATASOURCE VARCHAR(10000) 
CONSTRAINT MTDT_DASHBOARDS_DEF_CK CHECK (TYPE IN ('DEFAULT','GECKOBOARD'))
);


/*
	SCHEDULER REPORTS TABLE
*/
CREATE TABLE MTDT_REPORTS
(ID BIGSERIAL primary key, 
SCHEDULER VARCHAR(15) CHECK (SCHEDULER IN ('HOURLY','DAILY', 'WEEKLY', 'MONTHLY', 'TRIMESTRAL', 'SEMESTRAL', 'ANUAL')),
REPORTNAME VARCHAR(100),
OUTPUT_PROCESSOR VARCHAR(100) CHECK (OUTPUT_PROCESSOR IN ('pdf','xlsx','csv','rtf')),
PARAMETER1 VARCHAR(100),
PARAMETER2 VARCHAR(100),
PARAMETER3 VARCHAR(100),
PARAMETER4 VARCHAR(100),
PARAMETER5 VARCHAR(100),
PARAMETER6 VARCHAR(100),
PARAMETER7 VARCHAR(100),
PARAMETER8 VARCHAR(100),
PARAMETER9 VARCHAR(100),
EMAIL_TO VARCHAR(1000),
EMAIL_CC VARCHAR(1000),
EMAIL_BCC VARCHAR(1000),
EMAIL_SUBJECT VARCHAR(1000),
EMAIL_BODY VARCHAR(1000),
SFTP_SERVER VARCHAR(100),
SFTP_PORT VARCHAR(100),
SFTP_USER VARCHAR(100),
SFTP_PASS VARCHAR(100),
SFTP_DIR_OUT VARCHAR(100));


/*
	DATE VIEW
*/
CREATE OR REPLACE VIEW VW_FDATES AS
SELECT COLUMN_VALUE FDATE, SUBSTR(to_char(COLUMN_VALUE,'yyyy-mm-dd'),1,4) FYEAR, 
(CASE 
	WHEN SUBSTR(to_char(COLUMN_VALUE,'yyyy-mm-dd'),6,2) IN ('01','02','03','04','05','06') THEN '1ST SEMESTER'
	ELSE '2ND SEMESTER'
END) FSEMESTER,
(CASE 
	WHEN SUBSTR(to_char(COLUMN_VALUE,'yyyy-mm-dd'),6,2) IN ('01','02','03') THEN '1ST TRIMESTER'
	WHEN SUBSTR(to_char(COLUMN_VALUE,'yyyy-mm-dd'),6,2) IN ('04','05','06') THEN '2ND TRIMESTER'
	WHEN SUBSTR(to_char(COLUMN_VALUE,'yyyy-mm-dd'),6,2) IN ('07','08','09') THEN '3RD TRIMESTER'
	ELSE '4TH TRIMESTER'
END) FTRIMESTER,
SUBSTR(to_char(COLUMN_VALUE,'yyyy-mm-dd'),6,2) FMONTH,
SUBSTR(to_char(COLUMN_VALUE,'yyyy-mm-dd'),9,2) FDAY
FROM
(select (generate_series('1900-01-01', '2201-01-01', '1 day'::interval))::date as column_value) dates
;

/*
	REPORTS CONFIG
*/
CREATE TABLE MTDT_REPORT_CONFIG
(
   ID bigserial primary key, 
   REPORTNAME CHARACTER VARYING(50), 
   PROYECT	CHARACTER VARYING(50),
   VISIBILITYSTR	CHARACTER VARYING(100),
   IMGURL	CHARACTER VARYING(1000)
) ;
COMMENT ON TABLE MTDT_REPORT_CONFIG is 'REPORTS CONFIGURATION TABLE';
COMMENT ON COLUMN MTDT_REPORT_CONFIG.ID IS 'ID';
COMMENT ON COLUMN MTDT_REPORT_CONFIG.REPORTNAME IS 'NAME OF THE REPORT THAT CONFIGURATION WILL BE APPLIED';
COMMENT ON COLUMN MTDT_REPORT_CONFIG.PROYECT IS 'PROYECT NAME OR SEGREGATION NAME TO APPLY TO REPORT';
COMMENT ON COLUMN MTDT_REPORT_CONFIG.VISIBILITYSTR IS 'STRING WITH VIBILITY BY ELEMENT: "T1:1,T3:1,G1:1..."';
COMMENT ON COLUMN MTDT_REPORT_CONFIG.IMGURL IS 'IMG URL OF A LOGO OR IMAGE RESOURCE TO USE';
