CREATE OR REPLACE FUNCTION MTDT_LOAD_PRE_POST(V_ID INTEGER, V_TYPE VARCHAR, V_ELEMENTO VARCHAR)
RETURNS VOID AS $$
DECLARE
/* Procedure for the execution of the PRE and POST of cubes and dimensions
V_ID => Corresponding cube ID
V_TYPE => 'PRE' or 'POST'
V_ELEMENTO => 'CUBE' or another, to distinguish whether it is a cube or dimensions
*/
  C_CUBE_PRE_POST CURSOR (V_ID INTEGER, V_TYPE VARCHAR)
  IS
    SELECT REPLACE(SQL, '#','''') AS VSQL, ID_PRE_POST FROM MTDT_CUBE_PRE_POST 
    WHERE ID_CUBE=V_ID AND TYPE=V_TYPE
    ORDER BY ID_PRE_POST;
  C_DIMENSION_PRE_POST CURSOR (V_ID INTEGER, V_TYPE VARCHAR)
  IS
    SELECT REPLACE(SQL, '#','''') AS VSQL FROM MTDT_DIMENSION_PRE_POST 
    WHERE ID_DIMENSION=V_ID  AND TYPE=V_TYPE
    ORDER BY ID_PRE_POST;
V_SQL VARCHAR(32000);
V_ID_LOG INTEGER;
BEGIN
  IF V_ELEMENTO='CUBE' THEN
   FOR REG_COL IN C_CUBE_PRE_POST(V_ID, V_TYPE)
    LOOP
      V_SQL:=REG_COL.VSQL;
      -- HERE WE REGISTER THE CURRENT DATE, DUE WHEN I RELEASE THE CONSULTATION
	  V_ID_LOG:=MTDT_LOG_REGISTRATION('I',0,V_SQL,'MTDT_LOAD_PRE_POST',CONCAT(V_ID,'#',REG_COL.ID_PRE_POST,'#',V_TYPE,'#',V_ELEMENTO));
      BEGIN
      EXECUTE V_SQL;
      END;
      -- HERE WE REGISTER THE CURRENT DATE, DUE WHEN I RELEASE THE CONSULTATION
	  V_ID_LOG:=MTDT_LOG_REGISTRATION('U',V_ID_LOG,'','','');
    END LOOP;
  -- We enter this IF for V_ELEMENTO = DIMENSION
  else 
   FOR REG_COL IN C_DIMENSION_PRE_POST(V_ID, V_TYPE)
    LOOP
      V_SQL:=REG_COL.VSQL;
	  V_ID_LOG:=MTDT_LOG_REGISTRATION('I',0,V_SQL,'MTDT_LOAD_PRE_POST',CONCAT(V_ID,'#',V_TYPE,'#',V_ELEMENTO));	  
      BEGIN
      EXECUTE V_SQL;
      END;
	  V_ID_LOG:=MTDT_LOG_REGISTRATION('U',V_ID_LOG,'','','');
    END LOOP;
   END IF;
END;
$$ language plpgsql;
