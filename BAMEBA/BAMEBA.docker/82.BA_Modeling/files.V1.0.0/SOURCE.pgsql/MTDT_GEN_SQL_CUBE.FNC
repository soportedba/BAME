CREATE OR REPLACE FUNCTION MTDT_GEN_SQL_CUBE (V_ID_CUBE integer, V_TMP_NAME varchar) 
RETURNS text AS $$
declare
  C_DIMENSION CURSOR (V_ID_CUBE integer)
  IS
    SELECT D.NAME 
    FROM 
    	MTDT_DIMENSION D
    WHERE 
    	D.ID_CUBE=V_ID_CUBE 
    ORDER BY D.ID_DIMENSION;
  C_INDICATOR CURSOR (V_ID_CUBE integer)
  IS
    SELECT ID_INDICATOR, NAME FROM MTDT_INDICATOR
    WHERE ID_CUBE=V_ID_CUBE 
    ORDER BY ID_INDICATOR;
  C_INDICATOR_LIST CURSOR (V_ID_INDICATOR integer, V_ID_CUBE integer)
  IS
    SELECT 
    	(case when v_id_INDICATOR=id_INDICATOR then NAME else '0' end)||' AS '||NAME as NAME
    FROM 
    	MTDT_INDICATOR
    WHERE ID_CUBE=V_ID_CUBE;
  C_INDICATOR_LIST_SUM CURSOR (V_ID_CUBE integer)
  IS
    SELECT 
     (case when SQL_GROUP in ('DISTINCT-COUNT','COUNT') THEN 'MAX('
			ELSE SQL_GROUP||'('
			END)||NAME||') AS '||NAME AS NAME,
	 NAME AS NAME_ORIG
    FROM 
    	MTDT_INDICATOR
    WHERE ID_CUBE=V_ID_CUBE
    ORDER BY ID_INDICATOR;
V_DIM_SQL varchar(32000);   
V_IND_SQL text; 
V_IND_SQL_ESPEC varchar(32000); 
V_IND_SQL_SUM text; 
V_CUBE text;
BEGIN
	-- FOR A ID_CUBE, CREATE THE TABLE OF CREATE TABLE ON THE BASIS OF THE INDICATORS AND ASSOCIATED DIMENSIONS
	IF V_TMP_NAME is null OR V_TMP_NAME='' THEN
		V_DIM_SQL:=' '; -- WE WILL GENERATE THE LIST OF DIMENSIONS "D1,D2,D3"
		V_IND_SQL:=' '; -- WE WILL GENERATE THE LIST OF DIMENSIONS "I1 AS I1,0 AS I2, 0 AS I3"
		V_IND_SQL_ESPEC:=' '; 
		V_IND_SQL_SUM:=' '; 
		FOR REG_COL IN C_DIMENSION(V_ID_CUBE)
		LOOP
			IF V_DIM_SQL=' ' THEN
				V_DIM_SQL:=REG_COL.NAME;
			ELSE
				V_DIM_SQL:=V_DIM_SQL||','||REG_COL.NAME;
			END IF;
		END LOOP;
		FOR REG_COL_CUBE IN C_INDICATOR(V_ID_CUBE)
		LOOP
			IF V_IND_SQL=' ' THEN
				V_IND_SQL:='SELECT '||V_DIM_SQL||',';
			ELSE
				V_IND_SQL:=V_IND_SQL||' UNION SELECT '||V_DIM_SQL||',';
			END IF;
			-- DYNAMIC CALCULATION OF INDICATOR COLUMNS
			FOR REG_COL IN C_INDICATOR_LIST(REG_COL_CUBE.ID_INDICATOR, V_ID_CUBE)
			LOOP
				IF V_IND_SQL_ESPEC=' ' THEN
					V_IND_SQL_ESPEC:=REG_COL.NAME;
				ELSE
					V_IND_SQL_ESPEC:=V_IND_SQL_ESPEC||','||REG_COL.NAME;
				END IF;
			END LOOP;
			-- ADD THE PART OF FROM FROM EACH PART OF THE UNION
			V_IND_SQL:=V_IND_SQL||V_IND_SQL_ESPEC||' FROM TMP_'||REG_COL_CUBE.NAME;
			-- WE INITIATE COLUMNS OF INDICATORS
			V_IND_SQL_ESPEC:=' ';
		END LOOP;
		-- CALCULATION OF INDICATORS IN SUM ..., EXCEPT WHEN V_TMP_NAME IS NULL (V_IND_SQL_SUM=' ')
		FOR REG_COL IN C_INDICATOR_LIST_SUM(V_ID_CUBE)
		LOOP
			V_IND_SQL_SUM:=V_IND_SQL_SUM||','||REG_COL.NAME;
		END LOOP;
		-- V_CUBE GENERATION
		IF V_DIM_SQL=' ' OR V_IND_SQL_SUM=' ' THEN
			V_CUBE='';
		ELSE
			SELECT 'CREATE UNLOGGED TABLE '||NAME||' AS SELECT * FROM (SELECT ' INTO V_CUBE FROM MTDT_CUBE WHERE ID_CUBE=V_ID_CUBE;
			V_CUBE:=V_CUBE||V_DIM_SQL||V_IND_SQL_SUM||' FROM ('||V_IND_SQL||') v_ind_sql GROUP BY '||V_DIM_SQL||') V_CUBE';
		END IF;
	ELSE
		SELECT 'CREATE UNLOGGED TABLE '||NAME||' AS SELECT * FROM '||V_TMP_NAME INTO V_CUBE FROM MTDT_CUBE WHERE ID_CUBE=V_ID_CUBE;
	END IF;
	RETURN V_CUBE;
END;	
$$ language plpgsql;